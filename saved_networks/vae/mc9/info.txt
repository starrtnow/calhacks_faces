Params: 
 {'z_channel': 32, 'z_dim': 128, 'encoder dropout': 0.65, 'decoder dropout': 0.45, 'batch size': 250, 'epochs': 20, 'learning rate': 0.001} 
 Networks: 
 Encoder (
  (mu): Sequential (
    (0): Conv2d(3, 32, kernel_size=(4, 4), stride=(2, 2), bias=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
    (2): LeakyReLU (0.01)
    (3): Dropout2d (p=0.65)
    (4): Conv2d(32, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
    (6): LeakyReLU (0.01)
    (7): Dropout2d (p=0.65)
    (8): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (9): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
    (10): LeakyReLU (0.01)
    (11): Dropout2d (p=0.65)
    (12): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (13): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
    (14): LeakyReLU (0.01)
    (15): Dropout2d (p=0.65)
    (16): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (17): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
    (18): LeakyReLU (0.01)
    (19): Dropout2d (p=0.65)
    (20): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (21): LeakyReLU (0.01)
  )
  (var): Sequential (
    (0): Conv2d(3, 32, kernel_size=(4, 4), stride=(2, 2), bias=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
    (2): LeakyReLU (0.01)
    (3): Dropout2d (p=0.65)
    (4): Conv2d(32, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
    (6): LeakyReLU (0.01)
    (7): Dropout2d (p=0.65)
    (8): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (9): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
    (10): LeakyReLU (0.01)
    (11): Dropout2d (p=0.65)
    (12): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (13): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
    (14): LeakyReLU (0.01)
    (15): Dropout2d (p=0.65)
    (16): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (17): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
    (18): LeakyReLU (0.01)
    (19): Dropout2d (p=0.65)
    (20): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (21): LeakyReLU (0.01)
  )
  (mu_out): Linear (512 -> 128)
  (var_out): Linear (512 -> 128)
) 
 Decoder (
  (convnet): Sequential (
    (0): ConvTranspose2d(128, 512, kernel_size=(4, 4), stride=(1, 1), bias=False)
    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
    (2): ReLU ()
    (3): Dropout2d (p=0.45)
    (4): ConvTranspose2d(512, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (5): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
    (6): ReLU ()
    (7): Dropout2d (p=0.45)
    (8): ConvTranspose2d(256, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (9): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
    (10): ReLU ()
    (11): Dropout2d (p=0.45)
    (12): ConvTranspose2d(128, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
    (14): ReLU ()
    (15): Dropout2d (p=0.45)
    (16): ConvTranspose2d(64, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (17): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
    (18): ReLU ()
    (19): Dropout2d (p=0.45)
    (20): ConvTranspose2d(32, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (21): Sigmoid ()
  )
)